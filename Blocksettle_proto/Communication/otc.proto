syntax = "proto3";

package Blocksettle.Communication.Otc;

// Keep in sync with bs::network::ChatOTCSide::Type
enum Side
{
    SIDE_UNDEFINED = 0;
    SIDE_BUY = 1;
    SIDE_SELL = 2;
};

// Keep in sync with bs::network::OTCRangeID::Type
enum Range
{
    RANGE_1_5     = 0;
    RANGE_5_10    = 1;
    RANGE_10_50   = 2;
    RANGE_50_100  = 3;
    RANGE_100_250 = 4;
    RANGE_250PLUS = 5;
};

message Message
{
    message Offer
    {
        int64 amount = 1;
        int64 price = 2;
    }

    message BuyerOffers
    {
        Offer offer = 1;

        // public key of auth address from buying side (33 bytes)
        bytes auth_address_buyer = 2;
    }

    message SellerOffers
    {
        Offer offer = 1;
    }

    message BuyerAccepts
    {
        Offer offer = 1;

        bytes auth_address_buyer = 2;
    }

    message SellerAccepts
    {
        // Check details here one more time
        Offer offer = 1;

        // 32 bytes generated by accepting side
        bytes settlement_id = 2;

        bytes auth_address_seller = 3;

        bytes payin_tx_id = 4;
    }

    message BuyerAcks
    {
    }

    message Close
    {
    }

    oneof data
    {
        BuyerOffers buyer_offers = 1;
        SellerOffers seller_offers = 2;
        BuyerAccepts buyer_accepts = 3;
        SellerAccepts seller_accepts = 4;
        BuyerAcks buyer_acks = 5;
        Close close = 6;
    }
}

message PbRequest
{
    message Start
    {
        Side sender_side = 1;

        int64 amount = 2;
        int64 price = 3;

        bytes settlement_id = 4;

        bytes auth_address_seller = 5;
        bytes auth_address_buyer = 6;

        // Used to check fees and other details (UTXO for payin, settlement address etc)
        bytes unsigned_payin = 7;
        bytes unsigned_payout = 8;
        bytes unsigned_payout_fallback = 9;

        string chat_id_seller = 10;
        string chat_id_buyer = 11;
    }

    oneof data
    {
        Start start = 1;
    }
}

message PbResponse
{
    message Start
    {
        bool success = 1;
        string error_msg = 2;
    }

    oneof data
    {
        Start start = 1;
    }
}
