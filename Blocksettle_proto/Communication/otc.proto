syntax = "proto3";

package Blocksettle.Communication.Otc;

// Keep in sync with bs::network::ChatOTCSide::Type
enum Side
{
    SIDE_UNDEFINED = 0;
    SIDE_BUY = 1;
    SIDE_SELL = 2;
};

// Keep in sync with bs::network::OTCRangeID::Type
enum Range
{
    RANGE_1_5     = 0;
    RANGE_5_10    = 1;
    RANGE_10_50   = 2;
    RANGE_50_100  = 3;
    RANGE_100_250 = 4;
    RANGE_250PLUS = 5;
};

message Message
{
    message Offer
    {
        Side sender_side = 1;
        int64 amount = 2;
        int64 price = 3;

        // 32 bytes generated by offering side
        bytes random_part1 = 4;

        // public key of auth address from offering side (33 bytes)
        bytes auth_address = 5;
    }

    message Accept
    {
        // Check details here one more time
        Side sender_side = 1;
        int64 amount = 2;
        int64 price = 3;

        // 32 bytes generated by accepting side
        // settlement_id generated as sha256(random_part1 + random_part2)
        bytes random_part2 = 4;

        // public key of auth address from accepting side (33 bytes)
        bytes auth_address = 5;
    }

    message Close
    {
    }

    oneof data
    {
        Offer offer = 1;
        Accept accept = 2;
        Close close = 3;
    }
}

message PbRequest
{
    message Start
    {
        Side sender_side = 1;

        int64 amount = 2;
        int64 price = 3;

        bytes random_part1 = 4;
        bytes random_part2 = 5;
        bytes settlement_id = 6;

        bytes seller_auth_address = 7;
        bytes buyer_auth_address = 8;

        // Used to check fees and other details (UTXO for payin, settlement address etc)
        bytes unsigned_payin = 9;
        bytes unsigned_payout = 10;
        bytes unsigned_payout_fallback = 11;

        string seller_chat_id = 12;
        string buyer_chat_id = 13;
    }

    oneof data
    {
        Start start = 1;
    }
}

message PbResponse
{
    message Start
    {
        bool success = 1;
        string error_msg = 2;
    }

    oneof data
    {
        Start start = 1;
    }
}
